import { app, BrowserWindow, session, screen } from "electron";
import path from "path";
import "./api/ipcBridge";
import express from "express";
import cors from "cors";
import helmet from "helmet";
import { IS_SERVER, SERVER_PORT } from "./config/server.config";
import { graphicsRouter } from "./api/server/graphics.router";
import { playerRouter } from "./api/players/player.routes";
import { lineupsRouter } from "./api/lineups/lineup.routes";
import { matchRouter } from "./api/matches/match.routes";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

export let mainWindow: BrowserWindow | null;

const createWindow = (
  scaleFactor: number,
  width: number,
  height: number
): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: Math.floor((height * 0.9) / scaleFactor),
    width: Math.floor((width * 0.625) / scaleFactor),
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      defaultFontSize: Math.round((height * 12) / 1080),
    },
    autoHideMenuBar: true,
    icon: "url(static://assets/favicon.ico)",
    title: "ARAM Analyzer",
    // titleBarStyle: "hidden",
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  // Customize protocol to handle static resource.
  session.defaultSession.protocol.registerFileProtocol(
    "static",
    (request, callback) => {
      const fileUrl = request.url.replace("static://", "");
      const filePath = path.join(
        app.getAppPath(),
        ".webpack/renderer",
        fileUrl
      );
      callback(filePath);
    }
  );
  const primaryDisplay = screen.getPrimaryDisplay();
  const scaleFactor = primaryDisplay.scaleFactor;
  const width = primaryDisplay.workAreaSize.width;
  const height = primaryDisplay.workAreaSize.height;
  createWindow(scaleFactor, width, height);
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  const primaryDisplay = screen.getPrimaryDisplay();
  const scaleFactor = primaryDisplay.scaleFactor;
  const width = primaryDisplay.workAreaSize.width;
  const height = primaryDisplay.workAreaSize.height;
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow(scaleFactor, width, height);
  }
});

if (IS_SERVER) {
  const server = express();
  server.use(express.json());
  server.use(express.urlencoded({ extended: true }));
  server.use(cors());
  server.use(helmet());

  server.use("/graphics", graphicsRouter);
  server.use("/players", playerRouter);
  server.use("/lineups", lineupsRouter);
  server.use("/matches", matchRouter);

  server.listen(SERVER_PORT, () => {
    console.log(`Server is listening on port ${SERVER_PORT}`);
  });
}
